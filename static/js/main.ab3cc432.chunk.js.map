{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","boarder","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","PureComponent","Header","Component","ErrorBoundry","hasError","error","info","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ab3cc432.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?50x50`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    console.log('Cardlist');\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    console.log('searchbox');\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', boarder: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { PureComponent } from 'react'\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count){\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => { \r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react'\r\nimport CounterButton from './CounterButton'\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <CounterButton color={'red'} />\r\n                <h1 className='f1'>RoboFriends</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <Searchbox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;       \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false\r\n    //error: ''    \r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n                <Provider store={store}>\r\n                    <App />\r\n                </Provider>,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}